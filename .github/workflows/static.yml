# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Pages
        uses: actions/configure-pages@v2

      - name: Set up JDK 12
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '12.x'

      - name: Initialize project version
        id: project_version
        uses: its404/get-flutter-version@v1.0.0

      - name: Install Flutter SDK
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'     

      - name: Building Web Project
        run: flutter build web --web-renderer canvaskit --release --base-href "/mineslither/"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: './build/web'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
        
      - name: Building Linux Project
        run: flutter build linux --release
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build/linux/
          # asset_name: mineslither.msix
          # asset_content_type: application/zip

